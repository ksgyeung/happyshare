import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
//import styles from '../styles/Home.module.css'
import React from 'react';
import * as Antd from 'antd';
import * as I from '@ant-design/icons';
import dynamic from 'next/dynamic'

import HumanUnit from '../misc/human_unit';
import * as FileMemory from '../misc/file_memory';
import TokenContext from '../misc/token_context';

const UploadModal = dynamic(() => import('../components/UploadModal'));
const ShareConfigModal = dynamic(() => import('../components/ShareConfigModal'));

const Management: NextPage = () => 
{
    const {token} = React.useContext(TokenContext);
    const [showUpload, setShowUpload] = React.useState<boolean >(false);
    const [showShareConfig, setShowShareConfig] = React.useState<FileMemory.FileRecord | undefined>(undefined);
    const [dataSource, setDataSource] = React.useState<FileMemory.FileRecord[]>([]);

    React.useEffect(() => 
    {
        loadDataSource();
    }, []);

    const columns = [
    {
        title: 'Key',
        dataIndex: 'key',
        key: 'key',
    },
    {
        title: 'File name',
        dataIndex: 'filename',
        key: 'filename',
    },
    {
        title: 'Size',
        dataIndex: 'size',
        key: 'size',
        render: (item: number) =>
        {
            return HumanUnit(item);
        },
    },
    {
        title: 'MD5',
        dataIndex: 'md5',
        key: 'md5',
    },
    {
        title: '',
        render: (item: FileMemory.FileRecord) =>
        {
            return (
                <div style={{textAlign: 'end',}}>
                    <Antd.Space>
                        <Antd.Button onClick={() => handleDownloadClick(item)}>Download</Antd.Button>
                        <Antd.Button onClick={() => handleShareClick(item)}>Share</Antd.Button>
                        <Antd.Popconfirm
                            title="Are you sure to delete this file?"
                            onConfirm={() => handleDeleteClick(item)}
                            okText="Yes"
                            cancelText="No"
                        >
                            <Antd.Button danger={true}>Delete</Antd.Button>
                        </Antd.Popconfirm>
                    </Antd.Space>
                </div>
            );
        },
    },
    ];

    async function loadDataSource()
    {
        let response = await fetch('/api/list', {
            headers: new Headers({
                'authentication': `Bearer ${token!}`,
            }),
        });
        let body = await response.json();

        setDataSource(body);
    }

    const handleDownloadClick = function(item: FileMemory.FileRecord)
    {
        location.href = `/d${item.key}`;
    }

    const handleShareClick = function(item: FileMemory.FileRecord)
    {
        setShowShareConfig(item);
    }

    const handleDeleteClick = async function(item: FileMemory.FileRecord)
    {
        let response = await fetch('/api/delete',
        {
            method: 'POST',
            body: JSON.stringify({key: item.key}),
            credentials: 'omit',
            mode: 'same-origin',
            redirect: 'follow',
            cache: 'no-cache',
            headers: new Headers({
                'content-type': 'application/json',
                'authentication': `Bearer ${token!}`,
            }),
        });
        let body = await response.json();
        if(!body.ok)
        {
            alert(body.message);
            return;
        }

        let newDataSource = dataSource.filter(t => t.key != item.key);
        setDataSource(newDataSource);
    }

    return (
        <>
            <Head>
                <title>{process.env.NEXT_PUBLIC_TITLE}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div style={{textAlign: 'end',}}>
                <Antd.Space>
                    <Antd.Button icon={<I.ReloadOutlined />} onClick={() => loadDataSource()}>Refresh</Antd.Button>
                    <Antd.Button icon={<I.UploadOutlined />} onClick={() => setShowUpload(true)}>Upload file</Antd.Button>
                </Antd.Space>
            </div>
            <div className="content">
                <Antd.Table dataSource={dataSource} columns={columns} />
            </div>

            <UploadModal show={showUpload} onHide={() => setShowUpload(false)} onUploadCompleted={() => loadDataSource()} />
            <ShareConfigModal show={showShareConfig !== undefined} onHide={() => setShowShareConfig(undefined)} fileRecord={showShareConfig} />
        </>
    )
}

export default Management;
